@page "/"
@page "/Home"
@rendermode InteractiveServer
@using INIManager.Components.Models
@using INIManager.Components.Pages.Dialogs
@using INIManager.Components.Services
@using INIManager.Components.Services.Interfaces
@using Microsoft.AspNetCore.SignalR.Client
@using DialogOptions = MudBlazor.DialogOptions
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject IConfigurationService ConfigurationService
@inject ConfigurationDraftService ConfigurationDraftService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudPopoverProvider/>
<MudDialogProvider/>
<MudDialog/>
<MudSnackbarProvider/>

<div class="container">
    <div class="table-container">
        <h3>Draft Configurations</h3>
        <div class="table-wrapper">
            <table id="draftTable">
                <thead>
                <tr>
                    <th>Id</th>
                    <th>Name</th>
                    <th>Workstations</th>
                    <th>Timestamp</th>
                    <th>Action</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var configuration in _configurationDrafts)
                {
                    <tr>
                        <td>@configuration.Id</td>
                        <td>@configuration.Bezeichnung</td>
                        <td>
                            <select>
                                @foreach (var workstation in configuration.Workstations)
                                {
                                    <option value="@workstation.Name">@workstation.Name</option>
                                }
                            </select>
                        </td>
                        <td>@configuration.Timestamp</td>
                        <td>
                            <div class="action-buttons">
                                <button class="btn btn-edit" title="Edit" @onclick="() => EditDraft(configuration.Id)">
                                    <i
                                        class="fas fa-edit"></i></button>
                                <button class="btn btn-export" title="Export"
                                        @onclick="() => ExportDraft(configuration.Id)">
                                    <i class="fas fa-file-export"></i>
                                </button>
                                <button class="btn btn-delete" title="Delete"
                                        @onclick="() => DeleteDraft(configuration.Id)">
                                    <i class="fas fa-trash"></i></button>
                            </div>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    </div>

    <div class="table-container">
        <h3>Finished Configurations</h3>
        <div class="table-wrapper">
            <table id="finishedTable">
                <thead>
                <tr>
                    <th>Id</th>
                    <th>Name</th>
                    <th>Workstations</th>
                    <th>Timestamp</th>
                    <th>Action</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var configuration in _configurations)
                {
                    <tr>
                        <td>@configuration.Id</td>
                        <td>@configuration.Bezeichnung</td>
                        <td>
                            <select>
                                @foreach (var workstation in configuration.Workstations)
                                {
                                    <option value="@workstation.Name">@workstation.Name</option>
                                }
                            </select>
                        </td>
                        <td>@configuration.Timestamp</td>
                        <td>
                            <div class="action-buttons">
                                <button class="btn btn-edit" title="Edit" @onclick="() => Edit(configuration.Id)"><i
                                        class="fas fa-edit"></i></button>
                                <button class="btn btn-export" title="Export" @onclick="() => Export(configuration.Id)">
                                    <i class="fas fa-file-export"></i>
                                </button>
                                <button class="btn btn-delete" title="Delete" @onclick="() => Delete(configuration.Id)">
                                    <i class="fas fa-trash"></i></button>
                            </div>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    List<Configuration> _configurationDrafts = [];
    List<Configuration> _configurations = [];

    private HubConnection _hubConnection;
    
    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/configurationHub"))
            .Build();
        
        _hubConnection.On("ReloadConfigurations", async () =>
        {
            Console.WriteLine("ReloadConfigurations event received");
            _configurationDrafts = await ConfigurationDraftService.ReadConfiguration();
            _configurations = await ConfigurationService.ReadConfiguration();
            await InvokeAsync(StateHasChanged);
        });
        
        await _hubConnection.StartAsync();
        
        NavigationManager.LocationChanged += (sender, args) => { JsRuntime.InvokeVoidAsync("handleRouteChange", args.Location); };

        var uri = new Uri(NavigationManager.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);
        var value = query.GetValueOrDefault("noorigin");
        if (value == "true") await OpenError_Dialog_NoOriginFound_Async();

        _configurationDrafts = await ConfigurationDraftService.ReadConfiguration();
        _configurations = await ConfigurationService.ReadConfiguration();

        _configurationDrafts.ForEach(x => x.Workstations = x.Workstations.OrderBy(w => w.Sequence).ToList());
        _configurations.ForEach(x => x.Workstations = x.Workstations.OrderBy(w => w.Sequence).ToList());

        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) await JsRuntime.InvokeVoidAsync("initHome");
    }

    void EditDraft(int id)
    {
        Task.Delay(100);
        NavigationManager.NavigateTo($"/Configurator/{id}?from=Draft");
    }

    async Task ExportDraft(int id)
    {
    }

    async Task DeleteDraft(int id)
    {
        var result = await ConfigurationDraftService.DeleteConfiguration(id);
        if (result)
        {
            var itemToRemove = _configurationDrafts.FirstOrDefault(c => c.Id == id);
            if (itemToRemove is not null)
                _configurationDrafts.Remove(itemToRemove);

            StateHasChanged();
            Snackbar.Add("Erfolgreich gelöscht", Severity.Success);
        }
        else
        {
            Snackbar.Add("Erfolgreich gelöscht", Severity.Error);
        }
    }

    void Edit(int id)
    {
        Task.Delay(100);
        NavigationManager.NavigateTo($"/Configurator/{id}?from=Finished");
    }

    async Task Export(int id)
    {
    }

    async Task Delete(int id)
    {
        var result = await ConfigurationService.DeleteConfiguration(id);
        if (result)
        {
            var itemToRemove = _configurations.FirstOrDefault(c => c.Id == id);
            if (itemToRemove is not null)
                _configurations.Remove(itemToRemove);

            StateHasChanged();
            Snackbar.Add("Erfolgreich gelöscht", Severity.Success);
        }
        else
        {
            Snackbar.Add("Erfolgreich gelöscht", Severity.Error);
        }
    }

    private Task OpenError_Dialog_NoOriginFound_Async()
    {
        var options = new DialogOptions { BackgroundClass = "my-custom-class" };
        return DialogService.ShowAsync<Error_Dialog_NoOriginFound>("No origin was found", options);
    }

}