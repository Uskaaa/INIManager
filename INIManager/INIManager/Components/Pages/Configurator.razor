@page "/Configurator"
@using INIManager.Components.Database
@inject DbManager DbManager

@inject IJSRuntime JS
@implements IDisposable


<h3>Drag-and-Drop Test mit JS</h3>

<div id="drag" draggable="true"
     style="background-color: lightblue; padding: 10px; width: 100px;">
    Drag me!
</div>

<div id="drop"
     style="border: 2px dashed red; padding: 20px; margin: 10px; height: 100px;">
    Drop here!
</div>

<p>Log: @logMessage</p>

@code {
    private string logMessage = "Waiting for events...";
    private DotNetObjectReference<Configurator>? dotNetRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            dotNetRef = DotNetObjectReference.Create(this);
            // Warte, bis das Skript geladen ist
            await JS.InvokeVoidAsync("eval", "console.log('Checking for dragDropHandler...');");
            await WaitForScriptLoaded();
            await JS.InvokeVoidAsync("dragDropHandler.init", dotNetRef);
        }
    }

    private async Task WaitForScriptLoaded()
    {
        while (true)
        {
            try
            {
                var isLoaded = await JS.InvokeAsync<bool>("eval", "typeof dragDropHandler !== 'undefined'");
                if (isLoaded) break;
            }
            catch (JSException) { }
            await Task.Delay(100); // Warte 100ms und prüfe erneut
        }
    }

    [JSInvokable]
    public void OnDragStart(string message)
    {
        logMessage = message + " at " + DateTime.Now.ToString("HH:mm:ss");
        StateHasChanged();
    }

    [JSInvokable]
    public void OnDragOver(string message)
    {
        logMessage = message + " at " + DateTime.Now.ToString("HH:mm:ss");
        StateHasChanged();
    }

    [JSInvokable]
    public void OnDrop(string message)
    {
        logMessage = message + " at " + DateTime.Now.ToString("HH:mm:ss");
        StateHasChanged();
    }

    public void Dispose()
    {
        dotNetRef?.Dispose();
    }
}