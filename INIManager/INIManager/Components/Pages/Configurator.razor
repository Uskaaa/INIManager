@page "/Configurator"
@page "/Configurator/{Id}"
@rendermode InteractiveServer
@using INIManager.Components.Models
@using INIManager.Components.Pages.Components
@using INIManager.Components.Pages.Dialogs
@using INIManager.Components.Services
@using INIManager.Components.Services.Interfaces
@using Microsoft.AspNetCore.Identity
@using DialogOptions = MudBlazor.DialogOptions
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject ConfigurationService ConfigurationService
@inject ConfigurationDraftService ConfigurationDraftService
@inject IWorkstationService WorkstationService
@inject IDialogService DialogService
@inject SetSavedService SetSavedService
@inject IConfiguration Configuration
@inject IExportService ExportService
@inject ILockService LockService

<MudPopoverProvider/>
<MudDialogProvider/>
<MudDialog/>

<div class="configurator-container">
    <div class="drag-header">
        <h3>
            <Headline @ref="_headlineComponent" Title="@_configuration.Bezeichnung"/>
        </h3>
    </div>
    <div class="drag-container">
        <div class="drag-area">
            <h3>Workstations</h3>
            <ul class="source-list draggable-list">
                @foreach (var workstation in _workstations)
                {
                    <li class="item" draggable="true">
                        <div class="details">
                            <span>@workstation.Name</span>
                        </div>
                        <i class="uil uil-draggabledots"></i>
                    </li>
                }
            </ul>
        </div>
        <div class="drag-area">
            <h3>Configuration</h3>
            <ul class="target-list draggable-list">

            </ul>
        </div>

    </div>
    <div class="drag-footer">
        <div class="draft">
            <AutoSaveStatus @ref="_autoSaveStatusComponent" AutoSaveType="_autoSaveType" AutoSaveText="@_autoSave"/>
        </div>
    </div>
    <div class="preview-header">
        @_currentDateTime
    </div>
    <div class="preview-container">
        <h3>Live-Preview</h3>
        <div class="preview-tabs">
            <button class="preview-tab active" data-tab="hardware">Hardware.ini</button>
            <button class="preview-tab" data-tab="params">Params.ini</button>
            <button class="preview-tab" data-tab="defaults">Defaults.ini</button>
            <button class="preview-tab" data-tab="m2ksys">M2kSys.ini</button>
        </div>
        <div class="preview-views">
            <textarea readonly disabled type="text" class="preview-textarea preview preview-content-tab active"
                      id="preview-content-hardware"></textarea>
            <textarea readonly disabled type="text" class="preview-textarea preview preview-content-tab"
                      id="preview-content-params"></textarea>
            <textarea readonly disabled type="text" class="preview-textarea preview preview-content-tab"
                      id="preview-content-defaults"></textarea>
            <textarea readonly disabled type="text" class="preview-textarea preview preview-content-tab"
                      id="preview-content-m2ksys"></textarea>
        </div>
    </div>
    <div class="preview-footer">
        <div class="action-buttons">
            <button @onclick="SaveDraft" id="save-draft">Save Draft</button>
            <button @onclick="Save" id="save">Save</button>
            <button @onclick="Export" id="export">Export</button>
        </div>
    </div>
</div>

<style>
    .my-custom-class {
        backdrop-filter: blur(10px);
    }
</style>

@code {
    [Parameter] public string Id { get; set; }

    private string textHardware;
    private string textParams;
    private string textDefault;
    private string textM2kSys;

    private Headline _headlineComponent;
    private AutoSaveStatus _autoSaveStatusComponent;
    private AutoSaveType _autoSaveType = AutoSaveType.Error;
    private string _autoSave = "Draft not saved!";
    private Timer? _timer;
    private readonly SemaphoreSlim _saveLock = new(1, 1);
    private bool _autoSavePending = false;
    private bool _alreadySaved = false;

    private static readonly DateOnly Time = DateOnly.FromDateTime(DateTime.Now);
    private readonly string _currentDateTime = $"{Time.DayOfWeek.ToString()}, {Time}";

    private Configuration _configuration = new();
    private List<Workstation> _workstations = [];

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        if (parameters.TryGetValue<string>(nameof(Id), out var value))
        {
            if (string.IsNullOrEmpty(value)) NavigationManager.NavigateTo("/Home?noorigin=true");
        }

        await base.SetParametersAsync(parameters);
    }

    protected override async Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged += (sender, args) => { JsRuntime.InvokeVoidAsync("handleRouteChange", args.Location); };
        NavigationManager.LocationChanged += (sender, args) =>
        {
            Console.WriteLine("Lock Removed!");
            LockService.RemoveLock(_configuration.Id);
        };

        _workstations = await WorkstationService.ReadWorkstation();

        var uri = new Uri(NavigationManager.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);
        var value = query.GetValueOrDefault("from");

        switch (value)
        {
            case "NavMenu":
                _configuration.Id = Convert.ToInt32(Id);
                _configuration.Bezeichnung = $"Configuration-Draft-{Id}";
                _configuration.Timestamp = DateTime.Now.ToString("yyyy-MM-dd");
                _configuration.Type = TypeOfConfiguration.Draft;
                break;

            case "Draft":
                LockService.SetLock(Convert.ToInt32(Id));
                _configuration = await ConfigurationDraftService.ReadConfigurationById(Convert.ToInt32(Id));
                _configuration.Type = TypeOfConfiguration.Draft;
                if (_configuration.Workstations != null) await SetSavedService.PublishAsync(_configuration.Workstations);
                _autoSave = "Draft saved!";
                _autoSaveType = AutoSaveType.Saved;
                break;

            case "Finished":
                LockService.SetLock(Convert.ToInt32(Id));
                _configuration = await ConfigurationService.ReadConfigurationById(Convert.ToInt32(Id));
                _configuration.Type = TypeOfConfiguration.Finished;
                if (_configuration.Workstations != null) await SetSavedService.PublishAsync(_configuration.Workstations);
                _autoSave = "Configuration saved!";
                _autoSaveType = AutoSaveType.Saved;
                break;
        }

        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        textHardware = Configuration["PreviewTexts:Hardware"];
        textParams = Configuration["PreviewTexts:Params"];
        textDefault = Configuration["PreviewTexts:Default"];
        textM2kSys = Configuration["PreviewTexts:M2kSys"];

        await JsRuntime.InvokeVoidAsync("initConfigurator", _configuration.Workstations, new { textHardware, textParams, textDefault, textM2kSys }, DotNetObjectReference.Create(this));
    }

    [JSInvokable]
    public async Task OnUserInteraction()
    {
        if (_autoSavePending) return;
        _timer?.Dispose();
        if (_configuration.Type == TypeOfConfiguration.Draft) _autoSave = "Saving draft...";
        else if (_configuration.Type == TypeOfConfiguration.Finished) _autoSave = "Saving configuration...";
        _autoSaveType = AutoSaveType.Saving;
        await _autoSaveStatusComponent.UpdateStatus(_autoSaveType, _autoSave);
        _configuration.Timestamp = DateTime.Now.ToString("yyyy-MM-dd");
        _autoSavePending = true;
        _timer = new Timer(_ => AutoSave(), null, 5000, Timeout.Infinite);
    }

    async void AutoSave()
    {
        if (!await _saveLock.WaitAsync(1))
            if (!_autoSavePending)
            {
                _autoSave = "Draft not saved!";
                _autoSaveType = AutoSaveType.Error;
                await _autoSaveStatusComponent.UpdateStatus(_autoSaveType, _autoSave);
                return;
            }

        try
        {
            //Autosave logic
            await SaveLogic(_alreadySaved = false);

            //Autosave status
            var resultAutoSave = false;

            if (_configuration.Type == TypeOfConfiguration.Draft) resultAutoSave = await ConfigurationDraftService.CreateConfiguration(_configuration);
            else if (_configuration.Type == TypeOfConfiguration.Finished) resultAutoSave = await ConfigurationService.CreateConfiguration(_configuration);
            await _headlineComponent.UpdateTitle(_configuration.Bezeichnung);

            if (resultAutoSave)
            {
                if (_configuration.Type is TypeOfConfiguration.Draft)
                {
                    //Read Configuration and mark saved workstations
                    var resultRead = await ConfigurationDraftService.ReadConfigurationById(_configuration.Id);
                    if (resultRead.Workstations != null) await SetSavedService.PublishAsync(resultRead.Workstations);

                    _autoSave = "Draft saved!";
                }
                else if (_configuration.Type is TypeOfConfiguration.Finished)
                {
                    //Read Configuration and mark saved workstations
                    var resultRead = await ConfigurationService.ReadConfigurationById(_configuration.Id);
                    if (resultRead.Workstations != null) await SetSavedService.PublishAsync(resultRead.Workstations);

                    _autoSave = "Configuration saved!";
                }

                _autoSaveType = AutoSaveType.Saved;
                await _autoSaveStatusComponent.UpdateStatus(_autoSaveType, _autoSave);
            }
            else
            {
                if (_configuration.Type == TypeOfConfiguration.Draft) _autoSave = "Draft not saved!";
                if (_configuration.Type == TypeOfConfiguration.Finished) _autoSave = "Configuration not saved!";
                _autoSaveType = AutoSaveType.Error;
                await _autoSaveStatusComponent.UpdateStatus(_autoSaveType, _autoSave);
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
        finally
        {
            _saveLock.Release();
            _autoSavePending = false;
        }
    }

    async void SaveDraft()
    {
        if (_autoSavePending)
        {
            _autoSavePending = false;
            _timer?.Dispose();
            if (_configuration.Type == TypeOfConfiguration.Draft) _autoSave = "Draft not saved!";
            if (_configuration.Type == TypeOfConfiguration.Finished) _autoSave = "Configuration not saved!";
            _autoSaveType = AutoSaveType.Error;
            await _autoSaveStatusComponent.UpdateStatus(_autoSaveType, _autoSave);
        }

        await _saveLock.WaitAsync();
        try
        {
            _alreadySaved = false;
            if (_configuration.Type == TypeOfConfiguration.Finished)
            {
                await ConfigurationService.DeleteConfiguration(_configuration.Id);
                _configuration.Workstations?.Any(x => x.IsSaved = false);
                _alreadySaved = false;
            }

            _configuration.Type = TypeOfConfiguration.Draft;

            await SaveLogic(_alreadySaved);

            await OpenSave_Dialog_Async(true);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }

        finally
        {
            _saveLock.Release();
        }
    }

    async void Save()
    {
        if (_autoSavePending)
        {
            _autoSavePending = false;
            _timer?.Dispose();
            if (_configuration.Type == TypeOfConfiguration.Draft) _autoSave = "Draft not saved!";
            if (_configuration.Type == TypeOfConfiguration.Finished) _autoSave = "Configuration not saved!";
            _autoSaveType = AutoSaveType.Error;
            await _autoSaveStatusComponent.UpdateStatus(_autoSaveType, _autoSave);
        }

        await _saveLock.WaitAsync();
        try
        {
            _alreadySaved = false;
            if (_configuration.Type == TypeOfConfiguration.Draft)
            {
                await ConfigurationDraftService.DeleteConfiguration(_configuration.Id);
                _configuration.Workstations?.Any(x => x.IsSaved = false);
                _alreadySaved = true;
            }

            _configuration.Type = TypeOfConfiguration.Finished;

            await SaveLogic(_alreadySaved);

            await OpenSave_Dialog_Async(false);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }

        finally
        {
            _saveLock.Release();
        }
    }

    async void Export()
    {
        var zipBytes = await ExportService.ExportConfigurationAsync(_configuration);

        var fileName = $"Configuration-{_configuration.Id}.zip";

        using var streamRef = new DotNetStreamReference(new MemoryStream(zipBytes));
        await JsRuntime.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }

    private Task OpenSave_Dialog_Async(bool draft)
    {
        var parameters = new DialogParameters
        {
            { "Configuration", _configuration },
            { "Draft", draft },
            { "AutoSaveStatus", _autoSaveStatusComponent },
            { "HeadlineComponent", _headlineComponent }
        };
        var options = new DialogOptions { BackgroundClass = "my-custom-class" };
        return DialogService.ShowAsync
            <Save_Dialog>("Save", parameters, options);
    }

    async Task SaveLogic(bool alreadySaved)
    {
        List<Workstation>? savedWorkstations = [];
        if (_configuration.Workstations != null && !alreadySaved)
        {
            savedWorkstations = await SetSavedService.ListenOnceAsync();
        }

        List<ConfigurationItem?> workstationNames = await JsRuntime.InvokeAsync<List<ConfigurationItem?>>("saveConfiguration");
        List<Workstation> configurationWorkstations = [];
        List<Workstation> workstationsToDelete = [];
        if (savedWorkstations != null)
        {
            for (int i = 0; i < savedWorkstations.Count; i++)
            {
                var minimumTrue = 0;
                for (int j = 0; j < workstationNames.Count; j++)
                {
                    if (workstationNames[j] != null)
                    {
                        if (savedWorkstations[i].Name == workstationNames[j].Text && savedWorkstations[i].Sequence == workstationNames[j].Index)
                        {
                            workstationNames[j] = null;
                            minimumTrue = 1;
                        }
                    }
                }

                if (minimumTrue == 0)
                {
                    savedWorkstations[i].IsSaved = false;
                    workstationsToDelete.Add(savedWorkstations[i]);
                }
            }

            var result = false;
            switch (_configuration.Type)
            {
                case TypeOfConfiguration.Draft:
                    result = await ConfigurationDraftService.DeleteWorkstationsOfConfiguration(_configuration.Id, workstationsToDelete);
                    break;
                case TypeOfConfiguration.Finished:
                    result = await ConfigurationService.DeleteWorkstationsOfConfiguration(_configuration.Id, workstationsToDelete);
                    break;
            }

            if (!result) throw new Exception("Failed to delete workstations from configuration.");
        }

        foreach (var workstation in _workstations)
        {
            foreach (var workstationName in workstationNames)
            {
                if (workstationName != null)
                {
                    if (workstation.Name == workstationName.Text)
                    {
                        workstation.Sequence = workstationName.Index;
                        configurationWorkstations.Add(workstation);
                    }
                }
            }
        }

        _configuration.Workstations = configurationWorkstations;
    }

    [JSInvokable]
    public Task Unlock()
    {
        LockService.RemoveLock(_configuration.Id);
        return Task.CompletedTask;
    }


}