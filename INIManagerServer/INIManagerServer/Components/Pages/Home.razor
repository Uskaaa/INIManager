@page "/"
@using INIManagerServer.Components.Models
@using INIManagerServer.Components.Pages.Dialogs
@using INIManagerServer.Components.Services
@using INIManagerServer.Components.Services.Interfaces
@using DialogOptions = MudBlazor.DialogOptions
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject IConfigurationService ConfigurationService
@inject ConfigurationDraftService ConfigurationDraftService
@inject IJSRuntime JSRuntime
@inject IDialogService DialogService

<MudPopoverProvider/>
<MudDialogProvider/>
<MudDialog/>

<div class="container">
    <div class="table-container">
        <h3>Draft Configurations</h3>
        <div class="table-wrapper">
            <table id="draftTable">
                <thead>
                <tr>
                    <th>Id</th>
                    <th>Name</th>
                    <th>Workstations</th>
                    <th>Timestamp</th>
                    <th>Action</th>
                </tr>
                </thead>
                <tbody>
                <!-- Table content will be populated by JavaScript -->
                </tbody>
            </table>
        </div>
    </div>

    <div class="table-container">
        <h3>Finished Configurations</h3>
        <div class="table-wrapper">
            <table id="finishedTable">
                <thead>
                <tr>
                    <th>Id</th>
                    <th>Name</th>
                    <th>Workstations</th>
                    <th>Timestamp</th>
                    <th>Action</th>
                </tr>
                </thead>
                <tbody>
                <!-- Table content will be populated by JavaScript -->
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    List<Configuration> _configurationDrafts = new();
    List<Configuration> _configurations = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("initHome");
    }

    protected override async Task OnInitializedAsync()
    {
        _configurations = await ConfigurationService.ReadConfiguration();
        _configurationDrafts = await ConfigurationDraftService.ReadConfiguration();

        Uri uri = new Uri(NavigationManager.Uri);

        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);
        var value = query.GetValueOrDefault("noorigin");

        if (value == "true") await OpenError_Dialog_NoOriginFound_Async();
        
        await base.OnInitializedAsync();
    }

    void EditConfiguration(int id)
    {
        Console.WriteLine(id);
        Task.Delay(100);
        NavigationManager.NavigateTo($"/Configurator/{id}?from=Home");
    }

    void ExportConfiguration(int id)
    {
    }

    void DeleteConfiguration(int id)
    {
    }

    private Task OpenError_Dialog_NoOriginFound_Async()
    {
        var options = new DialogOptions { BackgroundClass = "my-custom-class" };
        return DialogService.ShowAsync<Error_Dialog_NoOriginFound>("No origin was found", options);
    }

}