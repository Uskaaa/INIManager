@page "/Configurator"
@using INIManagerServer.Components.Models
@using Orientation = Radzen.Orientation
@rendermode InteractiveServer

<div style="width: 50%;">
    <MudDropContainer T="DropItem" Items="_items" ItemsSelector="@((item,dropzone) => item.Selector == dropzone)" ItemDropped="ItemUpdated" Class="d-flex flex-wrap flex-grow-1">
        <ChildContent>
            @for (int i = 1; i <= 2; i++)
            {
                var dropzone = i.ToString();
                <MudPaper Class="ma-4 flex-grow-1">
                    <MudList T="string" Class="d-flex flex-column mud-height-full" Style="border: 1px solid black;">
                        <MudListSubheader>Drop Zone @dropzone</MudListSubheader>
                        <MudDropZone T="DropItem" Identifier="@dropzone" Class="flex-grow-1"/>
                    </MudList>
                </MudPaper>
            }
        </ChildContent>
        <ItemRenderer>
            <MudListItem T="string" Text="@context.Name" Style="background-color: blueviolet; border-radius: 2px;"/>
        </ItemRenderer>
    </MudDropContainer>

</div>

<div style="width: 50%;">
    
</div>

@code {
    private void ItemUpdated(MudItemDropInfo<DropItem> dropItem)
    {
        dropItem.Item.Selector = dropItem.DropzoneIdentifier;
    }

    private List<DropItem> _items = new()
    {
        new DropItem(){ Name = "Item 1", Selector = "1" },
        new DropItem(){ Name = "Item 2", Selector = "1" },
        new DropItem(){ Name = "Item 3", Selector = "1" },
        new DropItem(){ Name = "Item 4", Selector = "2" },
        new DropItem(){ Name = "Item 5", Selector = "2" },
    };

    public class DropItem
    {
        public string Name { get; init; }
        public string Selector { get; set; }
    }
}

@* $1$ Container for Drag and Drop #1# *@
@* <div style="width: 50%;"> *@
@*     <RadzenDropZoneContainer TItem="MyTask" Data="data" *@
@*                              ItemSelector="@ItemSelector" *@
@*                              ItemRender="@OnItemRender" *@
@*                              CanDrop="@CanDrop" *@
@*                              Drop="@OnDrop"> *@
@*         <ChildContent> *@
@*             <RadzenStack Orientation="Orientation.Horizontal" Gap="1rem" Wrap="FlexWrap.Wrap" class="rz-p-12"> *@
@*                 <RadzenDropZone Value="Status.Components" class="rz-display-flex rz-flex-column rz-border-radius-2 rz-p-4" Style="border-style: solid; border: 1px; flex: 1; gap: 1rem;"> *@
@*                     <RadzenText Text="Components" TextStyle="TextStyle.Subtitle2" /> *@
@*                 </RadzenDropZone> *@
@* *@
@*                 <RadzenDropZone Value="Status.Configuration" class="rz-display-flex rz-flex-column rz-border-radius-2 rz-p-4" Style="flex: 1; gap: 1rem;"> *@
@*                     <RadzenText Text="Configuration" TextStyle="TextStyle.Subtitle2" /> *@
@*                 </RadzenDropZone> *@
@*             </RadzenStack> *@
@*         </ChildContent> *@
@*         <Template> *@
@*             <strong>@context.Name</strong> *@
@*         </Template> *@
@*     </RadzenDropZoneContainer> *@
@* *@
@* </div> *@
@* *@
@* $1$ Container for Live Preview #1# *@
@* <div style="width: 50%;"> *@
@* *@
@* </div> *@
@* *@
@* <style> *@
@*     .rz-can-drop { *@
@*         background-color: white; *@
@*     } *@
@* </style> *@
@* *@
@* @code { *@
@* *@
@*     IList<MyTask> data; *@
@* *@
@*     protected override void OnInitialized() *@
@*     { *@
@*         data = Enumerable.Range(0, 5) *@
@*             .Select(i => *@
@*                 new MyTask() *@
@*                 { *@
@*                     Id = i, *@
@*                     Name = $"Task{i}", *@
@*                     Status = i < 3 ? Status.Components : Status.Configuration *@
@*                 }) *@
@*             .ToList(); *@
@*     } *@
@*      *@
@*     // Filter items by zone value *@
@*     Func<MyTask, RadzenDropZone<MyTask>, bool> ItemSelector = (item, zone) => item.Status == (Status)zone.Value && item.Status != null; *@
@* *@
@*     Func<RadzenDropZoneItemEventArgs<MyTask>, bool> CanDrop = request => *@
@*     { *@
@*         // Allow item drop only in the same zone, in "Deleted" zone or in the next/previous zone. *@
@*         return request.FromZone == request.ToZone || *@
@*                Math.Abs((int)request.Item.Status - (int)request.ToZone.Value) == 1; *@
@*     }; *@
@* *@
@*     void OnItemRender(RadzenDropZoneItemRenderEventArgs<MyTask> args) *@
@*     { *@
@*         // Customize item appearance *@
@*         if (args.Item.Name == "Task2") *@
@*         { *@
@*             args.Attributes["draggable"] = "false"; *@
@*             args.Attributes["style"] = "cursor:not-allowed"; *@
@*             args.Attributes["class"] = "rz-card rz-variant-flat rz-background-color-primary-lighter rz-color-on-primary-lighter"; *@
@*         } *@
@*         else *@
@*         { *@
@*             args.Attributes["class"] = "rz-card rz-variant-filled rz-background-color-primary-light rz-color-on-primary-light"; *@
@*         } *@
@*     } *@
@* *@
@*     void OnDrop(RadzenDropZoneItemEventArgs<MyTask> args) *@
@*     { *@
@*         if (args.FromZone != args.ToZone) *@
@*         { *@
@*             // update item zone *@
@*             args.Item.Status = (Status)args.ToZone.Value; *@
@*         } *@
@* *@
@*         if (args.ToItem != null && args.ToItem != args.Item) *@
@*         { *@
@*             // reorder items in same zone or place the item at specific index in new zone *@
@*             data.Remove(args.Item); *@
@*             data.Insert(data.IndexOf(args.ToItem), args.Item); *@
@*         } *@
@*     } *@
@* *@
@*     public class MyTask *@
@*     { *@
@*         public int Id { get; set; } *@
@*         public string Name { get; set; } *@
@*         public Status Status { get; set; } = Status.Components; *@
@*     } *@
@* *@
@*     public enum Status *@
@*     { *@
@*         Components, *@
@*         Configuration, *@
@*     } *@
@* } *@