@page "/Configurator"
@page "/Configurator/{Id}"
@using System.Timers
@using INIManagerServer.Components.Models
@using INIManagerServer.Components.Pages.Dialogs
@using INIManagerServer.Components.Services
@using INIManagerServer.Components.Services.Interfaces
@using Colors = MudBlazor.Colors
@using DialogOptions = MudBlazor.DialogOptions
@using Variant = Radzen.Variant
@rendermode InteractiveServer
@inject IJSRuntime JsRuntime
@inject IConfigurationService ConfigurationService
@inject ConfigurationDraftService ConfigurationDraftService
@inject WorkstationService WorkstationService
@inject NotificationService NotificationService
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<MudPopoverProvider/>
<MudDialogProvider />

<div class="configurator-container">
    <div class="drag-header">
        @if (!_configuration.Equals(null))
        {
            <span>Configurator</span>
        }
    </div>
    <div class="drag-container">
        <div class="drag-area">
            <ul class="source-list draggable-list">
                @foreach (var workstation in _workstations)
                {
                    <li class="item" draggable="true">
                        <div class="details">
                            <span>@workstation.Name</span>
                        </div>
                        <i class="uil uil-draggabledots"></i>
                    </li>
                }
            </ul>
        </div>
        <div class="drag-area">
            <ul class="target-list draggable-list">

            </ul>
        </div>

    </div>
    <div class="drag-footer">
        <span>Configurator</span>
    </div>
    <div class="preview-header">
        <MudTooltip Text="..." Arrow="true" Placement="Placement.Left">
            <RadzenButton Icon="lightbulb" ButtonStyle="ButtonStyle.Info"/>
        </MudTooltip>
    </div>
    <div class="preview-container">
        <textarea type="text" class="preview-textarea preview"></textarea>
    </div>
    <div class="preview-footer">
        <div class="draft">
            @if (_autoSaved)
            {
                <MudIcon Icon="@Icons.Material.Filled.Check" Color="Color.Default" />
            }
            else
            {
                <MudProgressCircular Size="Size.Small" Style="color: #151A2D;" Indeterminate="true"/>
            }
            <RadzenBadge Style="color: black;" Variant="Variant.Text" Text="@_autoSave"/>
        </div>
        <MudButton Disabled="_autoSaved" OnClick="() => SaveDraft()" Variant="MudBlazor.Variant.Filled"
                   Style="@($"background-color:{Colors.BlueGray.Darken1}; color: white;")">Save as draft
        </MudButton>
        <MudButton OnClick="() => OpenSave_Dialog_Async()" Variant="MudBlazor.Variant.Filled"
                   Style="@($"background-color:{Colors.BlueGray.Darken1}; color: white;")">Save
        </MudButton>
        <MudButton OnClick="() => Export()" Variant="MudBlazor.Variant.Filled" StartIcon="@Icons.Material.Filled.Save"
                   Style="background-color: #151A2D; color: white;">Export
        </MudButton>
    </div>
</div>

<style>
    .my-custom-class {
        backdrop-filter: blur(10px);
    }
</style>


@code {
    [Parameter] public string Id { get; set; }
    
    private string _configurationName = "";
    private string _autoSave = "Draft saved!";
    private bool _autoSaved = true;
    private System.Threading.Timer _timer;
    
    private Configuration _configuration = new();
    private List<Workstation> _workstations = [];

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsRuntime.InvokeVoidAsync("initDragDrop", _configuration, _workstations);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var uri = new Uri(NavigationManager.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);
        var value = query.GetValueOrDefault("from");

        if (value == "NavMenu")
        {
            _configuration = await ConfigurationDraftService.ReadConfigurationById(Convert.ToInt32(Id));
            _configuration.Type = TypeOfConfiguration.Draft;
        }
        else if (value == "Home")
        {
            _configuration = await ConfigurationService.ReadConfigurationById(Convert.ToInt32(Id)); 
            _configuration.Type = TypeOfConfiguration.Active;
        }
        else await OpenError_Dialog_NoOriginFound_Async();
        
        _workstations = await WorkstationService.ReadWorkstation();
    }

    private async Task OnUserInteraction()
    {
        _timer.Dispose();
        _autoSave = "Saving draft...";
        _autoSaved = false;
        _timer = new System.Threading.Timer(_ => SaveDraft(), null, 5000, Timeout.Infinite);
    }

    async void AutoSave()
    {
        bool result = false;
        if (_configuration.Type == TypeOfConfiguration.Draft) result = await ConfigurationDraftService.UpdateConfiguration(_configuration);
        else if (_configuration.Type == TypeOfConfiguration.Active) result = await ConfigurationService.UpdateConfiguration(_configuration);

        if (result)
        {
            _autoSave = "Draft saved!";
            _autoSaved = true;
        }
    }
    
    async void SaveDraft()
    {
        
    }
    
    void Save()
    {
    }
    
    void Export()
    {
    }

    private Task OpenError_Dialog_NoOriginFound_Async()
    {
        var options = new DialogOptions { BackgroundClass = "my-custom-class" };

        return DialogService.ShowAsync<Error_Dialog_NoOriginFound>("No origin was found", options);
    }
    
    private Task OpenSave_Dialog_Async()
    {
        var options = new DialogOptions { BackgroundClass = "my-custom-class" };

        

        return DialogService.ShowAsync<Save_Dialog>("Save", options);
    }
}