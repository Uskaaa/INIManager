@page "/Configurator"
@page "/Configurator/{Id}"
@using INIManagerServer.Components.Models
@using INIManagerServer.Components.Services
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@inject ConfigurationService _configurationService

<div class="configurator-container">
    <div class="drag-header">
        <span>Configurator</span>
    </div>
    <div class="drag-container">
        <div class="drag-area">
            <ul class="source-list draggable-list">
                @foreach (var workstation in workstations)
                {
                    <li class="item" draggable="true">
                        <div class="details">
                            <span>@workstation.Name</span>
                        </div>
                        <i class="uil uil-draggabledots"></i>
                    </li>
                }
            </ul>
        </div>
        <div class="drag-area">
            <ul class="target-list draggable-list">
            
            </ul>
        </div>

    </div>
    <div class="drag-footer">
        <span>Configurator</span>
    </div>
    <div class="preview-header">
        <span>Preview</span>
    </div>
    <div class="preview-container">
        <textarea type="text" class="preview-textarea preview"></textarea>
    </div>
    <div class="preview-footer">
        <span>Preview</span>
    </div>
</div>

@code {

    [Parameter] public int Id { get; set; }

    private Configuration _configuration = new();
    private List<Workstation> _workstationss = [];
    
    IEnumerable<Workstation> workstations = new List<Workstation>
    {
        new() { Id = 1, Name = "Workstation 1", Description = "Description 1" },
        new() { Id = 2, Name = "Workstation 2", Description = "Description 2" },
        new() { Id = 3, Name = "Workstation 3", Description = "Description 3" },
        new() { Id = 4, Name = "Workstation 4", Description = "Description 4" },
        new() { Id = 5, Name = "Workstation 5", Description = "Description 5" },
        new() { Id = 6, Name = "Workstation 6", Description = "Description 6" },
        new() { Id = 7, Name = "Workstation 7", Description = "Description 7" },
        new() { Id = 8, Name = "Workstation 8", Description = "Description 8" },
        new() { Id = 9, Name = "Workstation 9", Description = "Description 9" },
        new() { Id = 10, Name = "Workstation 10", Description = "Description 10" },
    }; 
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initDragDrop", _configuration);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (Id != null || Id != 0)
        {
            _configuration = await _configurationService.ReadConfigurationById(Id);
        }
    }
}