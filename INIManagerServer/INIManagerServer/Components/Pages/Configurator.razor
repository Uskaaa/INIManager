@page "/Configurator"
@page "/Configurator/{Id}"
@using System.Reflection.Metadata
@using INIManagerServer.Components.Models
@using INIManagerServer.Components.Services
@using INIManagerServer.Components.Services.Interfaces
@using Colors = MudBlazor.Colors
@using Variant = Radzen.Variant
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@inject IConfigurationService _configurationService
@inject WorkstationService _workstationService
@inject NotificationService NotificationService

<MudPopoverProvider />

<div class="configurator-container">
    <div class="drag-header">
        @if (!_configuration.Equals(null))
        {
            <span>Configurator</span>
        }
    </div>
    <div class="drag-container">
        <div class="drag-area">
            <ul class="source-list draggable-list">
                @foreach (var workstation in _workstations)
                {
                    <li class="item" draggable="true">
                        <div class="details">
                            <span>@workstation.Name</span>
                        </div>
                        <i class="uil uil-draggabledots"></i>
                    </li>
                }
            </ul>
        </div>
        <div class="drag-area">
            <ul class="target-list draggable-list">

            </ul>
        </div>

    </div>
    <div class="drag-footer">
        <span>Configurator</span>
    </div>
    <div class="preview-header">
        <MudTooltip Text="..." Arrow="true" Placement="Placement.Left">
            <RadzenButton Icon="lightbulb" ButtonStyle="ButtonStyle.Info"/>
        </MudTooltip>
    </div>
    <div class="preview-container">
        <textarea type="text" class="preview-textarea preview"></textarea>
    </div>
    <div class="preview-footer">
        <div class="draft">
            <MudProgressCircular Size="Size.Small" Style="color: #151A2D;" Indeterminate="true"/>
            <RadzenBadge Style="color: black;" Variant="Variant.Text" Text="@_autoSave"/>
        </div>
        <MudButton Disabled="_autoSaved" OnClick="() => SaveDraft()" Variant="MudBlazor.Variant.Filled"
                   Style="@($"background-color:{Colors.BlueGray.Darken1}; color: white;")">Save as draft
        </MudButton>
        <MudButton OnClick="() => Save()" Variant="MudBlazor.Variant.Filled"
                   Style="@($"background-color:{Colors.BlueGray.Darken1}; color: white;")">Save
        </MudButton>
        <MudButton OnClick="() => Export()" Variant="MudBlazor.Variant.Filled" StartIcon="@Icons.Material.Filled.Save"
                   Style="background-color: #151A2D; color: white;">Export
        </MudButton>
    </div>
</div>

@code {

    [Parameter]
    public string Id { get; set; }
    
    private bool _busy;
    private string _configurationName = "";
    private string _autoSave = "Saving Draft...";
    private bool _autoSaved = false;

    private Configuration _configuration = new();
    private List<Workstation> _workstations = [];

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initDragDrop", _configuration, _workstations);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _workstations = await _workstationService.ReadWorkstation();

        // if (Convert.ToInt32(Id) != 0)
        // {
        //     _configuration = await _configurationService.ReadConfigurationById(Convert.ToInt32(Id));
        // }
    }

    private void OnClick(string text)
    {
        NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "Button Clicked", Detail = text });
    }

    void Save()
    {
    }

    void SaveDraft()
    {
    }

    void Export()
    {
    }
}