@page "/Configurator"
@page "/Configurator/{Id}"
@rendermode InteractiveServer
@using INIManagerServer.Components.Models
@using INIManagerServer.Components.Pages.Dialogs
@using INIManagerServer.Components.Services
@using INIManagerServer.Components.Services.Interfaces
@using DialogOptions = MudBlazor.DialogOptions
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject IConfigurationService ConfigurationService
@inject ConfigurationDraftService ConfigurationDraftService
@inject WorkstationService WorkstationService
@inject IDialogService DialogService

<MudPopoverProvider/>
<MudDialogProvider/>
<MudDialog/>

<div class="configurator-container">
    <div class="drag-header">
        <h3>@_configuration.Bezeichnung</h3>
    </div>
    <div class="drag-container">
        <div class="drag-area">
            <h3>Workstations</h3>
            <ul class="source-list draggable-list">
                @foreach (var workstation in _workstations)
                {
                    <li class="item" draggable="true">
                        <div class="details">
                            <span>@workstation.Name</span>
                        </div>
                        <i class="uil uil-draggabledots"></i>
                    </li>
                }
            </ul>
        </div>
        <div class="drag-area">
            <h3>Configuration</h3>
            <ul class="target-list draggable-list">

            </ul>
        </div>

    </div>
    <div class="drag-footer">
        <div class="draft">
            <AutoSaveStatus @ref="_autoSaveStatusComponent" AutoSaved="_autoSaved" AutoSaveText="@_autoSave"/>
        </div>
    </div>
    <div class="preview-header">
        @_currentDateTime
    </div>
    <div class="preview-container">
        <h3>Live-Preview</h3>
        <textarea readonly disabled type="text" class="preview-textarea preview"></textarea>
    </div>
    <div class="preview-footer">
        <div class="action-buttons">
            <button @onclick="SaveDraft" id="save-draft">Save Draft</button>
            <button @onclick="Save" id="save">Save</button>
            <button id="export">Export</button>
        </div>
    </div>
</div>

<style>
    .my-custom-class {
        backdrop-filter: blur(10px);
    }
</style>

@code {
    [Parameter] public string Id { get; set; }

    private AutoSaveStatus _autoSaveStatusComponent;
    private string _autoSave = "Draft saved!";
    private bool _autoSaved = true;
    private Timer? _timer;

    private static readonly DateOnly Time = DateOnly.FromDateTime(DateTime.Now);
    private readonly string _currentDateTime = $"{Time.DayOfWeek.ToString()}, {Time}";

    private Configuration _configuration = new();
    private List<Workstation> _workstations = [];

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        if (parameters.TryGetValue<string>(nameof(Id), out var value))
        {
            if (string.IsNullOrEmpty(value)) NavigationManager.NavigateTo("/Home?noorigin=true");
        }

        await base.SetParametersAsync(parameters);
    }

    protected override async Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged += (sender, args) => { JsRuntime.InvokeVoidAsync("handleRouteChange", args.Location); };

        _workstations = await WorkstationService.ReadWorkstation();

        var uri = new Uri(NavigationManager.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);
        var value = query.GetValueOrDefault("from");

        switch (value)
        {
            case "NavMenu":
                _configuration.Id = Convert.ToInt32(Id);
                _configuration.Bezeichnung = $"Configuration-Draft-{Id}";
                _configuration.Timestamp = DateTime.Now.ToString("yyyy-MM-dd");
                _configuration.Type = TypeOfConfiguration.Empty;
                break;

            case "Draft":
                _configuration = await ConfigurationDraftService.ReadConfigurationById(Convert.ToInt32(Id));
                if (string.IsNullOrEmpty(_configuration.Bezeichnung))
                {
                    _configuration = await ConfigurationDraftService.ReadConfigurationById(Convert.ToInt32(Id));
                }

                _configuration.Type = TypeOfConfiguration.Draft;
                break;

            case "Finished":
                _configuration = await ConfigurationService.ReadConfigurationById(Convert.ToInt32(Id));
                if (string.IsNullOrEmpty(_configuration.Bezeichnung))
                {
                    _configuration = await ConfigurationDraftService.ReadConfigurationById(Convert.ToInt32(Id));
                }

                _configuration.Type = TypeOfConfiguration.Finished;
                break;
        }

        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsRuntime.InvokeVoidAsync("initConfigurator", _configuration.Workstations, DotNetObjectReference.Create(this), nameof(OnUserInteraction));
        }
    }

    [JSInvokable]
    public async Task OnUserInteraction()
    {
        if (_autoSaved != true) return;
        _timer?.Dispose();
        _autoSave = "Saving draft...";
        _autoSaved = false;
        _configuration.Timestamp = DateTime.Now.ToString("yyyy-MM-dd");
        _timer = new Timer(_ => AutoSave(), null, 5000, Timeout.Infinite);
        await _autoSaveStatusComponent.UpdateStatus(_autoSaved, _autoSave);
    }

    async void AutoSave()
    {
        var result = false;
        if (_configuration.Type == TypeOfConfiguration.Empty) result = await ConfigurationDraftService.CreateConfiguration(_configuration);
        else if (_configuration.Type == TypeOfConfiguration.Draft) result = await ConfigurationDraftService.CreateConfiguration(_configuration);
        else if (_configuration.Type == TypeOfConfiguration.Finished) result = await ConfigurationService.CreateConfiguration(_configuration);

        if (result)
        {
            if (_configuration.Type is TypeOfConfiguration.Draft or TypeOfConfiguration.Empty)
            {
                _autoSave = "Draft saved!";
                _configuration.Type = TypeOfConfiguration.Draft;
            }
            else if (_configuration.Type == TypeOfConfiguration.Finished) _autoSave = "Configuration saved!";
            _autoSaved = true;
            await _autoSaveStatusComponent.UpdateStatus(_autoSaved, _autoSave);
        }
        else
        {
            _autoSave = "Draft not saved!";
            _autoSaved = false;
            await _autoSaveStatusComponent.UpdateStatus(_autoSaved, _autoSave);
        }
    }

    async void SaveDraft()
    {
        var workstationList = await JsRuntime.InvokeAsync<string[]>("saveConfiguration");

        if (workstationList.Length != 0)
        {
            List<Workstation> workstations = [];
            foreach (var workstation in _workstations)
            {
                foreach (var workstationL in workstationList)
                {
                    if (workstation.Name == workstationL)
                    {
                        _configuration.Workstations.Add(workstation);
                    }
                }
            }
        }

        await OpenSave_Dialog_Async();
    }

    async void Save()
    {
        var workstationList = await JsRuntime.InvokeAsync<string[]>("saveConfiguration");

        if (workstationList.Length != 0)
        {
            List<Workstation> workstations = [];
            foreach (var workstation in _workstations)
            {
                foreach (var workstationL in workstationList)
                {
                    if (workstation.Name == workstationL)
                    {
                        _configuration.Workstations.Add(workstation);
                    }
                }
            }
        }

        await OpenSave_Dialog_Async();
    }

    void Export()
    {
    }

    private Task OpenSave_Dialog_Async()
    {
        var parameters = new DialogParameters
        {
            { "Configuration", _configuration },
        };
        var options = new DialogOptions { BackgroundClass = "my-custom-class" };
        return DialogService.ShowAsync<Save_Dialog>("Save", parameters, options);
    }

}