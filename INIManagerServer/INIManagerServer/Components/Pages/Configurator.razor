@page "/Configurator"
@page "/Configurator/{Id}"
@using INIManagerServer.Components.Models
@using INIManagerServer.Components.Pages.Dialogs
@using INIManagerServer.Components.Services
@using INIManagerServer.Components.Services.Interfaces
@using DialogOptions = MudBlazor.DialogOptions
@rendermode InteractiveServer
@inject IJSRuntime JsRuntime
@inject IConfigurationService ConfigurationService
@inject ConfigurationDraftService ConfigurationDraftService
@inject WorkstationService WorkstationService
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<MudPopoverProvider/>
<MudDialogProvider />
<MudDialog />

<div class="configurator-container">
    <div class="drag-header">
        @if (!_configuration.Equals(null))
        {
            <h3>Configuration</h3>
        }
    </div>
    <div class="drag-container">
        <div class="drag-area">
            <h3>Workstations</h3>
            <ul class="source-list draggable-list">
                @foreach (var workstation in _workstations)
                {
                    <li class="item" draggable="true">
                        <div class="details">
                            <span>@workstation.Name</span>
                        </div>
                        <i class="uil uil-draggabledots"></i>
                    </li>
                }
            </ul>
        </div>
        <div class="drag-area">
            <h3>Configuration</h3>
            <ul class="target-list draggable-list">

            </ul>
        </div>

    </div>
    <div class="drag-footer">
        <div class="draft">
            <AutoSaveStatus @ref="_autoSaveStatusComponent" AutoSaved="_autoSaved" AutoSaveText="@_autoSave" />
        </div>
    </div>
    <div class="preview-header">
        @_currentDateTime
    </div>
    <div class="preview-container">
        <h3>Live-Preview</h3>
        <textarea readonly disabled type="text" class="preview-textarea preview"></textarea>
    </div>
    <div class="preview-footer">
        <div class="action-buttons">
            <button id="save-draft">Save Draft</button>
            <button @onclick="() => Save()" id="save">Save</button>
            <button id="export">Export</button>
        </div>
    </div>
</div>

<style>
    .my-custom-class {
        backdrop-filter: blur(10px);
    }
</style>


@code {
    
    private AutoSaveStatus _autoSaveStatusComponent;
    
    [Parameter] public string Id { get; set; }
    private static DateOnly _time = DateOnly.FromDateTime(DateTime.Now);
    private string _currentDateTime = $"{_time.DayOfWeek.ToString()}, {_time}";
    private string _configurationName = "";
    private string _autoSave = "Draft saved!";
    private bool _autoSaved = true;
    private Timer? _timer;

    private Configuration _configuration = new();
    private List<Workstation> _workstations = [];

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JsRuntime.InvokeVoidAsync("initDragDrop", _configuration, _workstations, DotNetObjectReference.Create(this), nameof(OnUserInteraction));
    }
    
    protected override bool ShouldRender()
    {
        Uri uri = new Uri(NavigationManager.Uri);
        
        if (uri.Query.Contains("from=NavMenu"))
        {
            return true;
        }
    
        if (uri.Query.Contains("from=Home"))
        {
            return true;
        }
    
        return false;
    }
    
    protected override async Task OnInitializedAsync()
    {
        Uri uri = new Uri(NavigationManager.Uri);
        
        if (!(uri.Query.Contains("NavMenu") || uri.Query.Contains("Home")))
        {
            Console.WriteLine("No origin found");
            await OpenError_Dialog_NoOriginFound_Async();
            return;
        }
        
        await base.OnInitializedAsync();
        
        _workstations = await WorkstationService.ReadWorkstation();

        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);
        var value = query.GetValueOrDefault("from");

        if (value == "NavMenu")
        {
            _configuration = await ConfigurationDraftService.ReadConfigurationById(Convert.ToInt32(Id));
            _configuration.Type = TypeOfConfiguration.Draft;
        }
        else if (value == "Home")
        {
            _configuration = await ConfigurationService.ReadConfigurationById(Convert.ToInt32(Id));
            _configuration.Type = TypeOfConfiguration.Active;
        }
    }

    [JSInvokable]
    public async Task OnUserInteraction()
    {
        if (_autoSaved != true) return;
        _timer?.Dispose();
        _autoSave = "Saving draft...";
        _autoSaved = false;
        _timer = new Timer(_ => AutoSave(), null, 5000, Timeout.Infinite);
        await _autoSaveStatusComponent.UpdateStatus(_autoSaved, _autoSave);
    }

    async void AutoSave()
    {
        Console.WriteLine("asdf");
        bool result = false;
        if (_configuration.Type == TypeOfConfiguration.Draft) result = await ConfigurationDraftService.UpdateConfiguration(_configuration);
        else if (_configuration.Type == TypeOfConfiguration.Active) result = await ConfigurationService.UpdateConfiguration(_configuration);

        if (result)
        {
            _autoSave = "Draft saved!";
            _autoSaved = true;
            await _autoSaveStatusComponent.UpdateStatus(_autoSaved, _autoSave);
        }
        else 
        {
            _autoSave = "Draft not saved!";
            _autoSaved = false;
            await _autoSaveStatusComponent.UpdateStatus(_autoSaved, _autoSave);
        }
    }

    void SaveDraft()
    {
    }

    void Save()
    {
        
    }

    void Export()
    {
    }

    private Task OpenError_Dialog_NoOriginFound_Async()
    {
        var options = new DialogOptions { BackgroundClass = "my-custom-class" };
        return DialogService.ShowAsync<Error_Dialog_NoOriginFound>("No origin was found", options);
    }

    private Task OpenSave_Dialog_Async()
    {
        var options = new DialogOptions { BackgroundClass = "my-custom-class" };
        return DialogService.ShowAsync<Save_Dialog>("Save", options);
    }
}