@rendermode InteractiveServer
@using INIManagerServer.Components.Models
@using INIManagerServer.Components.Services
@using INIManagerServer.Components.Services.Interfaces
@inject IConfigurationService ConfigurationService
@inject ConfigurationDraftService ConfigurationDraftService
@inject SetSavedService SetSavedService

<MudDialog Style="width: 500px;">
    <DialogContent>
        <MudTextField @bind-Value="Configuration.Bezeichnung"
                      For="@(() => Configuration.Bezeichnung)"
                      Immediate="true"
                      Label="Name" />
        <br>
        <MudTextField @bind-Value="Timestamp"
                      For="@(() => Configuration.Timestamp)"
                      Label="Timestamp" 
                      ReadOnly="true"/>
    </DialogContent>
    <DialogActions>
        <button class="button-cancel" @onclick="Cancel">Cancel</button>
        <button class="button-save"  @onclick="Submit">Save</button>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }
    
    [Parameter]
    public Configuration Configuration { get; set; }
    
    [Parameter]
    public bool Draft { get; set; }
    
    [Parameter]
    public AutoSaveStatus AutoSaveStatus { get; set; }

    string Timestamp = DateTime.Now.ToString("yyyy-MM-dd");

    private async void Submit()
    {
        if (Draft)
        {
            //Create or Update Configuration
            var resultCreate = await ConfigurationDraftService.CreateConfiguration(Configuration);
            
            //Read Configuration and mark saved workstations
            var resultRead = await ConfigurationDraftService.ReadConfigurationById(Configuration.Id);
            resultRead?.Workstations.Any(x => x.IsSaved = true);
            if (resultCreate) if (Configuration.Workstations != null) await SetSavedService.PublishAsync(Configuration.Workstations);
            
            Configuration.Type = TypeOfConfiguration.Draft;
            await AutoSaveStatus.UpdateStatus(AutoSaveType.Saved, "Draft saved!");
        }
        else
        {
            //Create or Update Configuration
            var resultCreate = await ConfigurationService.CreateConfiguration(Configuration);
            
            //Read Configuration and mark saved workstations
            var resultRead = await ConfigurationDraftService.ReadConfigurationById(Configuration.Id);
            resultRead?.Workstations.Any(x => x.IsSaved = true);
            if (resultCreate) if (Configuration.Workstations != null) await SetSavedService.PublishAsync(Configuration.Workstations);
            
            Configuration.Type = TypeOfConfiguration.Finished;
            await AutoSaveStatus.UpdateStatus(AutoSaveType.Saved, "Configuration saved!");
        }
        MudDialog.Close(DialogResult.Ok(true));
    }

    private void Cancel()
    {
        MudDialog.Close(DialogResult.Cancel());
    }
}